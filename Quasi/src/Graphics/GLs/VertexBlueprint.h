#pragma once
#include "Utils/MacroIteration.h"

#define Q_GL_VERTEX_BLUEPRINT(V, SHADER) \
    [&] (const auto& inVertex) -> V { \
        V outVertex; \
        Q_ITERATE_SEQUENCE(Q_GL_VERTEX_BLUEPRINT_MAP, Q_TUP_TO_SEQUENCE(SHADER)) \
        return outVertex; \
    }

#define Q_GL_VERTEX_BLUEPRINT_MAP(S) \
    Q_GL_VERTEX_BLUEPRINT_SEG(S, Q_CAT(Q_GL_VERTEX_BLUEPRINT_DO_, Q_UNARY S))
#define Q_GL_VERTEX_BLUEPRINT_SEG(ORIG, S) \
    Q_UNARY(Q_DEFER(Q_ARGS_THIRD)(S, Q_GL_VERTEX_BLUEPRINT_EXEC, Q_GL_VERTEX_BLUEPRINT_DO_PLAIN))(ORIG, S)

#define Q_GL_VERTEX_BLUEPRINT_DO_out Q_GL_VERTEX_BLUEPRINT_EXEC_OUT,
#define Q_GL_VERTEX_BLUEPRINT_DO_in Q_GL_VERTEX_BLUEPRINT_EXEC_IN,

#define Q_GL_VERTEX_BLUEPRINT_DO_PLAIN(O, ...) Q_UNARY O
#define Q_GL_VERTEX_BLUEPRINT_EXEC(O, F, N) F(N)
#define Q_GL_VERTEX_BLUEPRINT_EXEC_OUT(K) outVertex. Q_UNARY3 K
#define Q_GL_VERTEX_BLUEPRINT_EXEC_IN(K) Q_ITERATE_SEQUENCE_N2(Q_GL_VERTEX_BLUEPRINT_EXEC_IN_EACH, Q_TUP_TO_SEQUENCE(K));
#define Q_GL_VERTEX_BLUEPRINT_EXEC_IN_EACH(K) const auto& Q_UNARY K = inVertex. Q_UNARY K;

#define QGLCreateBlueprint$(...) Q_GL_VERTEX_BLUEPRINT(__VA_ARGS__)